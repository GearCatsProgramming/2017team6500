package org.usfirst.frc.team6500.robot;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends IterativeRobot {

	//We have spark motor controllers for the drivetrain
	//so we are using the Spark class to initiate our front left, front right, back left, & back right motors
	Spark fleft, fright, bleft, bright;
	
	//We have a Victor motor controller to controller the motor for the elevator
	Victor elevator;
	
	Relay relayone, relaytwo;
	
	//Create an object for the controller based on the Joystick class (or XboxController)
	Joystick controller;
	//XboxController controller;
	
	//Creating a RobotDrive object called drive so we can control the motors as a whole, not individually
	RobotDrive drive;
	
	NetworkTable testtable;
	
	//Our gyroscope is a model ADXRS450, and there is a class for that so we make a gyro object with it
	ADXRS450_Gyro gyro;
	
	//The sonar/ultrasonic sensor we have does not have a dedicated class but it has an analog output so we can plug it
	//into one of the analog inputs on the RoboRio and read the value from there
	AnalogInput sonar;
	
	//A variable that makes sure the robot doesn't try and run the autonomous portion of code more than once
	boolean autonomous = true;
	
	//The driveMode variable controls what drive of driving the robot is doing
	//When driveMode is 0 the robot drives normally
	//When driveMode is 1 the robot goes into debugging mode and you can control the side motor pairs individually
	//When driveMode is 2 the robot is soft disabled
	String driveMode ="Disable";
	//If a control delay variable is not created, the joystick's input is read too fast
	//and the driver cycles through options way too fast to control it.
	int controldelay = 0;
	//These are the variables for reading from the sonar/ultrasonic sensor
	//The function reads repeatedly into soundsum for soundrepeat (100 as of writing) times
	//It then divides soundsum by soundrepeat into soundaverage and returns soundaverage
	double soundsum, soundaverage; int soundrepeat = 100;
	//These variables control the speed for the motors, you can find more explanation in the functions
	double yindex, turnindex, power;
	double ymult = 0.75;
	double turnmult = 0.25;
	//A variable for timing things that we don't want to happen super often
	int tick = 0;
	//For debugging purposes
	double xmin, xmax;
	
	Servo testServo;
	
	//The @Override tag means we are overriding the method that was defined in the superclass (IterativeRobot in this case)
	//The robotInit method happens once when the RoboRio starts up and never again.
	//We need to define everything that we will use later now
	@Override
	public void robotInit() {
		//We create instances for the 4 motors objects from earlier
		//and then create the new RobotDrive object using those instances
		fleft = new Spark(Ports.leftfront);
		fright = new Spark(Ports.rightfront);
		bleft = new Spark(Ports.leftrear);
		bright = new Spark(Ports.rightrear);
		elevator = new Victor(Ports.elevator);
		testServo = new Servo(Ports.servo);
		drive = new RobotDrive(fleft, bleft, fright, bright);
		
		relayone = new Relay(0);
		relaytwo = new Relay(1);
		
		bright.setInverted(true);
		fright.setInverted(true);
		
		drive.setSafetyEnabled(false);
		
		testtable = NetworkTable.getTable("vision");
		testtable.putNumber("LeftOrRight", 0);
		
		testServo.set(1.0);
		
		//Creating the Joystick object using the USB port ID we have it plugged into
		controller = new Joystick(Ports.joystickid);
		//controller = new XboxController(Ports.joystickid);
		
		//Making instances for the sensors and calibrating them/setting them up
		gyro = new ADXRS450_Gyro();
		sonar = new AnalogInput(1);
		gyro.calibrate();
		
		//Setting the robot to be soft disabled by default.
		//This way if the joystick is being pushed when the
		//robot is enabled, it doesn't shoot forward/backward
		driveMode = "Disable";
		CameraServer.getInstance().startAutomaticCapture();
	}
	
	//This function sets all the motors to off when
	//the robot is in soft disable mode
	public void killmotors() {
		fleft.set(0);
		fright.set(0);
		bleft.set(0);
		bright.set(0);
	}
	
	//This code runs when the autonomous portion of the match is happening,
	//and it (should) only runs once (see the autonomous variable)
	@Override
	public void autonomousPeriodic() {
		if (autonomous) {
			//Drive both sides
			drive.tankDrive(0.1, 0.1);
			System.out.println("one");
			//for a quarter of a second
			Timer.delay(00.3);
			//and keep ramping up
			drive.tankDrive(0.2, 0.2);
			System.out.println("2");
			Timer.delay(00.3);
			drive.tankDrive(00.3, 00.3);
			System.out.println("3");
			Timer.delay(0.3);
			drive.tankDrive(0.4, 0.4);
			System.out.println("4");
			Timer.delay(0.3);
			drive.tankDrive(0.5, 0.5);
			System.out.println("5");
			Timer.delay(0.3);
			drive.tankDrive(0.6, 0.6);
			System.out.println("6");
			Timer.delay(0.3);
			drive.tankDrive(0.7, 0.7);
			System.out.println("7");
			Timer.delay(0.3);
			drive.tankDrive(0.8, 0.8);
			System.out.println("8");
			Timer.delay(0.3);
			drive.tankDrive(0.9, 0.9);
			System.out.println("9");
			Timer.delay(0.3);
			drive.tankDrive(1.0, 1.0);
			System.out.println("10");
			Timer.delay(0.3);
			drive.tankDrive(0.9, 0.9);
			System.out.println("9");
			Timer.delay(0.5);
			drive.tankDrive(0.8, 0.8);
			System.out.println("8");
			Timer.delay(0.5);
			drive.tankDrive(0.7, 0.7);
			System.out.println("7");
			Timer.delay(0.5);
			drive.tankDrive(0.6, 0.6);
			System.out.println("6");
			Timer.delay(0.5);
			drive.tankDrive(0.5, 0.5);
			System.out.println("5");
			Timer.delay(0.5);
			drive.tankDrive(0.4, 0.4);
			System.out.println("4");
			Timer.delay(0.5);
			drive.tankDrive(0.3, 0.3);
			System.out.println("3");
			Timer.delay(0.5);
			drive.tankDrive(0.2, 0.2);
			System.out.println("2");
			Timer.delay(0.5);
			drive.tankDrive(0.1, 0.1);
			System.out.println("1");
			Timer.delay(0.5);
			//and then stop
			killmotors();
			//Now set the autonomous variable to false so the code won't keep running
			autonomous = false;
		}
	}
	
	//DEPRECATEDE
	//Reads the distance value from the sonar/ultrasonic sensor
	public double readUltrasonic() {
		//Make sure the variables are reset
		soundaverage = 0;
		soundsum = 0;
		//A for loop takes three lines of code:
		//1) Any code needed to define your variables for the for loop
		//2) A condition
		//3) Something to do after every iteration
		for (int i = 0; i <= soundrepeat; i++) {
			//Get the voltage from the analog pin and add it to the total (soundsum)
			soundsum = soundsum + sonar.getVoltage();
		}
		//Average out the values by dividing the total(soundsum) by the amount of times
		//we read the sensor (soundrepeat), and put the result into the soundaverage value
		soundaverage = soundsum / soundrepeat;
		//Return soundaverage
		soundaverage = soundaverage / 4;
		soundaverage = soundaverage * 2.54;
		return sonar.getAverageVoltage();
	}
	
	//This method loops as fast as possible while the robot is in
	@SuppressWarnings("deprecation")
	//the teleoperated (controlled by driver) period of the match
	@Override
	public void teleopPeriodic() {
		//Calculate the speed multiplier by the position of the throttle
		//However, the value returned by the getThrottle function ranges
		//from -1 to 1, and we need a range of 0 to 1, so we add 1 to
		//make the range 0 to 2
		//double multiplier = controller.getRawAxis(3);
		double multiplier = controller.getThrottle() + 1;
		//Then we divide by 2 to get the correct range of 0 to 1
		multiplier = multiplier / 2;
		//The thing is, the value returned by getThrottle conflicts with
		//the indicators on the joystick.  When you move the throttle towards
		//the plus indicator, it decreases the value, and vice versa for
		//the negative indicator.  So we have to inverse the value by doing
		//1 minus our previous value.
		multiplier = multiplier + 0.5;
		multiplier = multiplier * 0.75;
		//multiplier = 1 - multiplier;
		//This code does the switching for drive modes.
		//The if statement checks if button #2 on the controller (where the thumb rests),
		//and checks to make sure it hasn't been too soon since a button was pressed
		//if (controller.getStartButton() && controldelay == 0){
		if (controller.getRawButton(2) && controldelay == 0) {
			//If the driveMode is 0 or 1, we can just add 1 to change it
			//and inform the user that the mode changed, just for confirmation
			if (driveMode == "Normal" || driveMode == "Debugging"){
				//driveMode one is debugging mode
				if (driveMode == "Normal"){
					driveMode = "Debugging";
					System.out.println("MODE: Debugging Mode");
				}
				//driveMode two is when the robot is disabled in software
				if (driveMode == "Debugging"){
					driveMode = "Disable";
					System.out.println("xMin: " + xmin + ", xMax:" + xmax);
					System.out.println("MODE: Soft disable");
				}
			} else { //If the driveMode is not 0 or 1, it's 2 so we need to loop it back to 0
				driveMode = "Normal";
				//driveMode zero is when the robot is doing normal movement
				System.out.println("MODE: Normal Movement");
			}
			//Set the control delay
			controldelay = 20;
		}
		
		//If the the robot is in normal drive,
		if (driveMode == "Normal") {
			//tell the RobotDrive object to do tank drive.
			//It gets the power for the left and right side and multiplies it by the multiplier form the throttle
			//drive.tankDrive(getLeftPower() * multiplier, getRightPower() * multiplier);
			//drive.arcadeDrive(controller);
			drive.arcadeDrive(controller.getY() * multiplier, controller.getX() * multiplier);
			//Actuator code
			//if (controller.getXButton()) {
			if (controller.getRawButton(3)) {
				if (relayone.get() == Relay.Value.kOn) {
					relayone.set(Relay.Value.kOff);
				}else{
					relayone.set(Relay.Value.kOn);
				}
			}
			//Elevator code
			int POVPos = controller.getPOV();
			if (POVPos == 180) {
				elevator.set(1);
			}else{
				if (POVPos == 0) {
					elevator.set(-1);
				}else{
					elevator.set(0.0);
				}
			}
			//Vision code
			if (controller.getRawButton(4)) {
			//if (controller.getYButton()) {
				double LeftOrRight = testtable.getNumber("LeftOrRight");
				if (LeftOrRight != 0){
					if (LeftOrRight == 1){
						fleft.set(.75);
						bleft.set(.75);
						fright.set(.25);
						bright.set(.25);
					}
					if (LeftOrRight == -1){
						fleft.set(.25);
						bleft.set(.25);
						fright.set(.75);
						bright.set(.75);
					}
				}
			}
		}
		
		//If the robot is in debugging mode,
		if (driveMode == "Debugging") {
//			//check if button 3 is pressed,
//			if (controller.getAButton()) {
//			//if (controller.getRawButton(5)) {
//				//if it is move the left side motors at full power.
//				fleft.set(0.75 * multiplier);
//				bleft.set(0.75 * multiplier);
//			}else{
//				//Check if button 5 is pressed,
//				if (controller.getBButton()) {
//				//if (controller.getRawButton(6)) {
//					//if it is move the right side motors at full power.
//					fright.set(0.75 * multiplier);
//					bright.set(0.75 * multiplier);
//				}else{
//					if (controller.getBumper(Hand.kRight)) {
//					//if (controller.getRawButton(7)){
//						drive.tankDrive(1, 1);
//					}else{
//						if (controller.getBumper(Hand.kLeft)) {
//						//if (controller.getRawButton(8)) {
//							drive.tankDrive(0.75, 0.75);
//						}else{
//							//If neither button 3 or button 5 are being pressed, stop the motors.
//							killmotors();
//						}
//					}
//				}
//			}
			
			//If the A button/trigger is being pressed rev up the elevator
			//if (controller.getTrigger) {
			
			int POVPos = controller.getPOV();
			if (POVPos == 180) {
				elevator.set(1);
			}else{
				if (POVPos == 0) {
					elevator.set(-1);
				}else{
					elevator.set(0.0);
				}
			}
			//The button checks in this driveMode have no checks for controldelay
			//because otherwise it would just end up pulsing the motors over and over
		}
		//If the driveMode 
		if (driveMode == "Disable") {
			killmotors();
		}
//		drive.arcadeDrive(controller.getY() * multiplier, -controller.getX() * multiplier);
		if (controldelay > 0) { controldelay = controldelay - 1; }
		if (tick < 100) { tick = tick + 1; }
		if (tick == 100) { tick = 0; }
		if (tick == 10) {
			//System.out.println("Angle: " + gyro.getAngle() + ", Rate:" + gyro.getRate());
			//System.out.println(readUltrasonic());
//			if (testServo.get() > 0.9) {
//				testServo.set(-1);
//			}else{
//				testServo.set(1);
//			}
//			controller.setRumble(GenericHID.RumbleType.kRightRumble, 1.0);
		}
		
		//Putting values to the SmartDashboard
		SmartDashboard.putNumber("Gyroscope Angle", gyro.getAngle());
		SmartDashboard.putString("Drive Mode", driveMode);
		SmartDashboard.putBoolean("n", false);
	}
	
	public double getLeftPower() {
//		yindex = controller.getY(Hand.kLeft);
//		//yindex = controller.getY();
//		if (controller.getBumper(Hand.kLeft)) {
//		//if (controller.getRawButton(3)) {
//			turnindex = -0.5;
//		}
//		if (controller.getBumper(Hand.kRight)) {
//		//if (controller.getRawButton(4)) {
//			turnindex = 0.5;
//		}
//		if (controller.getBumper(Hand.kLeft) && controller.getBButton()) {
//		//if (controller.getRawButton(5)) {
//			turnindex = -1;
//		}
//		if (controller.getBumper(Hand.kRight) && controller.getBButton()) {
//		//if (controller.getRawButton(6)) {
//			turnindex = 1;
//		}
//		yindex = yindex * ymult;
//		turnindex = turnindex * turnmult;
//		power = yindex + turnindex;
//		power = 0 - power;
		power = controller.getY(Hand.kLeft);
		return power * -1;
	}
	
	public double getRightPower() {
//		yindex = controller.getY(Hand.kLeft);
//		//yindex = controller.getY();
//		if (controller.getBumper(Hand.kLeft)) {
//		//if (controller.getRawButton(3)) {
//			turnindex = 0.5;
//		}
//		if (controller.getBumper(Hand.kRight)) {
//		//if (controller.getRawButton(4)) {
//			turnindex = -0.5;
//		}
//		if (controller.getBumper(Hand.kLeft) && controller.getBButton()) {
//		//if (controller.getRawButton(5)) {
//			turnindex = 1;
//		}
//		if (controller.getBumper(Hand.kRight) && controller.getBButton()) {
//		//if (controller.getRawButton(6)) {
//			turnindex = -1;
//		}
//		yindex = yindex * ymult;
//		turnindex = turnindex * turnmult;
//		power = yindex + turnindex;
//		power = 0 - power;
		power = controller.getY(Hand.kRight);
		return power * -1; 
	}

	@Override
	public void testPeriodic() {

	}
}
