package org.usfirst.frc.team6500.robot;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;

public class Robot extends IterativeRobot {

	//We have spark motor controllers so we are using the Spark class to initiate our front left, front right, back left, & back right motors
	Spark fleft, fright, bleft, bright;
	
	Victor elevator;
	Victor dumper;
	
	//Create an object for the controller based on the Joystick class (or XboxController)
	Joystick controllerR, controllerL;
	
	//Creating a RobotDrive object called drive so we can control the motors as a whole, not individually
	RobotDrive drive;
	
	//Our gyroscope is a model ADXRS450, and there is a class for that so we make a gyro object with it
	ADXRS450_Gyro gyro;
	
	//A variable that makes sure the robot doesn't try and run the autonomous portion of code more than once
	boolean autonomous = true;
	
	double rightboost, leftboost = 0.0;
	
	boolean nitro = false;
	
	//If a control delay variable is not created, the joystick's input is read too fast
	//and the driver cycles through options way too fast to control it.
	int controldelay = 0;
	//A variable for timing things that we don't want to happen super often
	int tick = 0;
	
	boolean driveArcade = true;
	
	Servo pan, tilt, leftFlap, rightFlap;
	
	boolean flaps = true;
	boolean dumperUp = true;
	
	public void toggleFlaps() {
		if (flaps) {
			leftFlap.set(0.5);
			rightFlap.set(0.0);
			flaps = false;
		}else{
			leftFlap.set(0.0);
			rightFlap.set(0.4);
			flaps = true;
		}
		
	}
	
	double panpos, tiltpos = 0.5;
	
	public void setPT(){
		pan.set(panpos);
		tilt.set(tiltpos);
	}
	
	private void toggleDumper() {
		if (dumperUp) {
			dumper.set(0.9);
			dumperUp = false;
		}else{
			dumper.set(-0.9);
			dumperUp = true;
		}
		Timer.delay(1.0);
		dumper.set(0.0);
	}
	
	//The @Override tag means we are overriding the method that was defined in the superclass (IterativeRobot in this case)
	//The robotInit method happens once when the RoboRio starts up and never again.
	//We need to define everything that we will use later now
	@Override
	public void robotInit() {
		//We create instances for the 4 motors objects from earlier
		//and then create the new RobotDrive object using those instances
		fleft = new Spark(Ports.leftfront);
		fright = new Spark(Ports.rightfront);
		bleft = new Spark(Ports.leftrear);
		bright = new Spark(Ports.rightrear);
		drive = new RobotDrive(fleft, bleft, fright, bright);
		
		fleft.setInverted(true);
		bleft.setInverted(true);
		
		elevator = new Victor(Ports.elevator);
		dumper = new Victor(Ports.actuator);
		toggleDumper();
		
		drive.setSafetyEnabled(false);
		
		pan = new Servo(Ports.pan);
		tilt = new Servo(Ports.tilt);
		setPT();
		
		leftFlap = new Servo(Ports.leftGear);
		rightFlap = new Servo(Ports.rightGear);
		toggleFlaps();
		
		//Creating the Joystick object using the USB port ID we have it plugged into
		controllerR = new Joystick(Ports.joystickid);
		controllerL = new Joystick(Ports.joystickid2);
		
		//Making instances for the sensors and calibrating them/setting them up
		gyro = new ADXRS450_Gyro();
		gyro.calibrate();
		
		CameraServer.getInstance().startAutomaticCapture();
	}
	
	//This function sets all the motors to off when
	//the robot is in soft disable mode
	public void killmotors() {
		fleft.set(0);
		fright.set(0);
		bleft.set(0);
		bright.set(0);
	}
	
	//This code runs when the autonomous portion of the match is happening,
	//and it (should) only runs once (see the autonomous variable)
	@Override
	public void autonomousPeriodic() {
		if (autonomous) {
			//Right
//			drive.tankDrive(-0.75, -0.75);
//			Timer.delay(1.25);
//			drive.tankDrive(0.75, -0.75);
//			Timer.delay(0.3);
//			drive.tankDrive(-0.75, -0.75);
//			Timer.delay(1.5);
//			drive.tankDrive(0.75, 0.75);
//			Timer.delay(0.1);
			
			//Middle
			
//			drive.tankDrive(-0.75, -0.75);
//			Timer.delay(1.5);
//			drive.tankDrive(0.75, 0.75);
//			Timer.delay(0.1);
			
			//Left
			drive.tankDrive(-0.75, -0.75);
			Timer.delay(1.2);
			drive.tankDrive(-0.75, 0.75);
			Timer.delay(0.3);
			drive.tankDrive(-0.75, -0.75);
			Timer.delay(1.5);
			drive.tankDrive(0.75, 0.75);
			Timer.delay(0.2);
			
			//and then stop
			killmotors();
			//Now set the autonomous variable to false so the code won't keep running
			autonomous = false;
		}
	}
	
	//This method loops every 20 milliseconds (1/50 of a second) while the robot is in
	//the teleoperated (controlled by driver) period of the match
	@Override
	public void teleopPeriodic() {
		//Calculate the speed multiplier by the position of the throttle
		//However, the value returned by the getThrottle function ranges
		//from -1 to 1, and we need a range of 0 to 1, so we add 1 to
		//make the range 0 to 2
		double multiplier = controllerR.getThrottle() + 1;
		//Then we divide by 2 to get the correct range of 0 to 1
		multiplier = multiplier / 2;
		//The thing is, the value returned by getThrottle conflicts with
		//the indicators on the joystick.  When you move the throttle towards
		//the plus indicator, it decreases the value, and vice versa for
		//the negative indicator.  So we have to inverse the value by doing
		//1 minus our previous value.
		multiplier = 1 - multiplier;
		multiplier = multiplier * 0.80;
		//This code does the switching for drive modes.
		//The if statement checks if button #2 on the controller (where the thumb rests),
		//and checks to make sure it hasn't been too soon since a button was pressed
		if (controllerR.getRawButton(12)) {
			drive.tankDrive(-1.0, -1.0);
		}else{
			if (controllerR.getRawButton(11) && controldelay == 0) {
				if (driveArcade) {
					driveArcade = false;
					System.out.println("Tank Drive");
				}else{
					driveArcade = true;
					System.out.println("Arcade Drive");
				}
				controldelay = 15;
			}
			
			if (controllerR.getTrigger()) {
				rightboost = 0.05;
			}else{
				rightboost = 0.0;
			}
			
			if (controllerL.getTrigger()) {
				leftboost = 0.05;
			}else{
				leftboost = 0.0;
			}
			
			if (controllerR.getRawButton(5) && controldelay == 0) {
				toggleFlaps();
				controldelay = 15;
			}
			
			if (controllerR.getRawButton(3)) {
				toggleDumper();
			}
			
			if (controllerR.getRawButton(6)) {
				elevator.set(1.0);
			}else{
				if (controllerR.getRawButton(4)) {
					elevator.set(-1.0);
				}else{
					elevator.set(0.0);
				}
			}
			
			int POVPos = controllerR.getPOV();
			if (POVPos == 0) {
				if (tiltpos < 0.98) {
					tiltpos = tiltpos + 0.02;
				}
			}else{
				if (POVPos == 180) {
					if (tiltpos > 0.29) {
						tiltpos = tiltpos - 0.02;
					}
				}
			}
			
			if (POVPos == 90) {
				if (panpos < 0.98) {
					panpos = panpos + 0.02;
				}
			}else{
				if (POVPos == 270) {
					if (panpos > 0.02) {
						panpos = panpos - 0.02;
					}
				}
			}
			
			if (controllerR.getRawButton(7)) {
				panpos = 0.0;
				tiltpos = 0.9;
			}else{
				if (controllerR.getRawButton(8)) {
					panpos = 0.5;
					tiltpos = 0.9;
				}else{
					if (controllerR.getRawButton(9)) {
						panpos = 1.0;
						tiltpos = 0.1;
					}
				}
			}
			
			setPT();
			
			if (driveArcade) {
				drive.arcadeDrive(controllerR.getY() * (multiplier + rightboost), controllerR.getX() * (multiplier + rightboost));
			}else{
				drive.tankDrive(controllerL.getY() * (multiplier + leftboost), controllerR.getY() * (multiplier + rightboost));
			}
		}
//		drive.arcadeDrive(controller.getY() * multiplier, -controller.getX() * multiplier);
		if (controldelay > 0) { controldelay = controldelay - 1; }
		if (tick < 20) { tick = tick + 1; }
		if (tick == 20) { tick = 0; }
		if (tick == 10) {
			//System.out.println(readUltrasonic());
		}
	}

	@Override
	public void testPeriodic() {

	}
}